<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_do_if_lkup (void *ctx, struct xfi *xf)" startline="7" endline="61">
static int __always_inline dp_do_if_lkup (void *ctx, struct xfi *xf)
{
    struct intf_key key;
    struct dp_intf_tact *l2a;
    key.ifindex = DP_IFI (ctx);
    key.ing_vid = xf->l2m.vlan[0];
    key.pad = 0;

#ifdef HAVE_DP_EGR_HOOK
    if (DP_IIFI (ctx) == 0) {
        __u32 ikey = LLB_PORT_NO;
        __u32 *oif = NULL;
        oif = bpf_map_lookup_elem (& tx_intf_map, & ikey);
        if (!oif) {
            return DP_PASS;
        }
        key.ifindex = *(__u32*) oif;
    }

#endif
    LL_DBG_PRINTK ("[INTF] -- Lookup\n");
    LL_DBG_PRINTK ("[INTF] ifidx %d vid %d\n", key.ifindex, bpf_ntohs (key.ing_vid));
    xf->pm.table_id = LL_DP_SMAC_MAP;
    l2a = bpf_map_lookup_elem (& intf_map, & key);
    if (!l2a) {
        LL_DBG_PRINTK ("[INTF] not found");
        LLBS_PPLN_PASS (xf);
        return -1;
    }
    LL_DBG_PRINTK ("[INTF] L2 action %d\n", l2a->ca.act_type);
    if (l2a->ca.act_type == DP_SET_DROP) {
        LLBS_PPLN_DROP (xf);
    }
    else if (l2a->ca.act_type == DP_SET_TOCP) {
        LLBS_PPLN_TRAP (xf);
    }
    else if (l2a->ca.act_type == DP_SET_IFI) {
        xf->pm.iport = l2a->set_ifi.xdp_ifidx;
        xf->pm.zone = l2a->set_ifi.zone;
        xf->pm.bd = l2a->set_ifi.bd;
        xf->pm.mirr = l2a->set_ifi.mirr;
        xf->pm.pprop = l2a->set_ifi.pprop;
        xf->qm.ipolid = l2a->set_ifi.polid;
    }
    else {
        LLBS_PPLN_DROP (xf);
    }
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_do_mark_mirr (void *ctx, struct xfi *xf)" startline="64" endline="82">
static int __always_inline dp_do_mark_mirr (void *ctx, struct xfi *xf)
{
    struct  __sk_buff *skb = DP_TC_PTR (ctx);
    int *oif;
    int key;
    key = LLB_PORT_NO;
    oif = bpf_map_lookup_elem (& tx_intf_map, & key);
    if (!oif) {
        return -1;
    }
    skb->cb[0] = LLB_MIRR_MARK;
    skb->cb[1] = xf->pm.mirr;
    LL_DBG_PRINTK ("[REDR] Mirr port %d OIF %d\n", key, *oif);
    return bpf_clone_redirect (skb, *oif, BPF_F_INGRESS);
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int dp_do_mirr_lkup (void *ctx, struct xfi *xf)" startline="84" endline="112">
static int dp_do_mirr_lkup (void *ctx, struct xfi *xf)
{
    struct dp_mirr_tact *ma;
    __u32 mkey = xf->pm.mirr;
    LL_DBG_PRINTK ("[MIRR] -- Lookup\n");
    LL_DBG_PRINTK ("[MIRR] -- Key %u\n", mkey);
    ma = bpf_map_lookup_elem (& mirr_map, & mkey);
    if (!ma) {
        LLBS_PPLN_DROP (xf);
        return -1;
    }
    LL_DBG_PRINTK ("[MIRR] Action %d\n", ma->ca.act_type);
    if (ma->ca.act_type == DP_SET_ADD_L2VLAN || ma->ca.act_type == DP_SET_RM_L2VLAN) {
        struct dp_l2vlan_act *va = &ma->vlan_act;
        return dp_set_egr_vlan (ctx, xf, ma->ca.act_type == DP_SET_RM_L2VLAN ? 0 : va->vlan, va->oport);
    }
    LLBS_PPLN_DROP (xf);
    return -1;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_do_mark_mirr (void *ctx, struct xfi *xf)" startline="116" endline="120">
static int __always_inline dp_do_mark_mirr (void *ctx, struct xfi *xf)
{
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_do_mirr_lkup (void *ctx, struct xfi *xf)" startline="122" endline="127">
static int __always_inline dp_do_mirr_lkup (void *ctx, struct xfi *xf)
{
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_trap_packet (void *ctx, struct xfi *xf)" startline="131" endline="158">
static int __always_inline dp_trap_packet (void *ctx, struct xfi *xf)
{
    struct ll_dp_pmdi *pmd;
    int z = 0;
    __u64 flags = BPF_F_CURRENT_CPU;
    pmd = bpf_map_lookup_elem (& pkts, & z);
    if (!pmd)
        return 0;
    LL_DBG_PRINTK ("[TRAP] START--\n");
    pmd->ifindex = ctx->ingress_ifindex;
    pmd->xdp_inport = xf->pm.iport;
    pmd->xdp_oport = xf->pm.oport;
    pmd->pm.table_id = xf->table_id;
    pmd->rcode = xf->pm.rcode;
    pmd->pkt_len = xf->pm.py_bytes;
    flags |= (__u64) pmd->pkt_len << 32;
    if (bpf_perf_event_output (ctx, &pkt_ring, flags, pmd, sizeof (*pmd))) {
        LL_DBG_PRINTK ("[TRAP] FAIL--\n");
    }
    return DP_DROP;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_trap_packet (void *ctx, struct xfi *xf, void *fa_)" startline="160" endline="226">
static int __always_inline dp_trap_packet (void *ctx, struct xfi *xf, void *fa_)
{
    struct ethhdr *neth;
    struct ethhdr *oeth;
    uint16_t ntype;
    struct llb_ethhdr *llb;
    void *dend = DP_TC_PTR (DP_PDATA_END (ctx));
    LL_DBG_PRINTK ("[TRAP] START--\n");
    oeth = DP_TC_PTR (DP_PDATA (ctx));
    if (oeth + 1 > dend) {
        return DP_DROP;
    }
    memcpy (xf->l2m.dl_dst, oeth->h_dest, 6 * 2);
    ntype = oeth->h_proto;
    if (dp_add_l2 (ctx, (int) sizeof (*llb))) {
        return DP_PASS;
    }
    neth = DP_TC_PTR (DP_PDATA (ctx));
    dend = DP_TC_PTR (DP_PDATA_END (ctx));
    if (neth + 1 > dend) {
        return DP_DROP;
    }
    memcpy (neth->h_dest, xf->l2m.dl_dst, 6 * 2);
    neth->h_proto = bpf_htons (ETH_TYPE_LLB);
    llb = DP_ADD_PTR (neth, sizeof (* neth));
    if (llb + 1 > dend) {
        return DP_DROP;
    }
    llb->iport = bpf_htons (xf->pm.iport);
    llb->oport = bpf_htons (xf->pm.oport);
    llb->rcode = xf->pm.rcode;
    if (xf->tm.tun_decap) {
        llb->rcode |= LLB_PIPE_RC_TUN_DECAP;
    }
    llb->mmap = xf->pm.table_id;
    llb->ntype = ntype;
    xf->pm.oport = LLB_PORT_NO;
    if (dp_redirect_port (&tx_intf_map, xf) != DP_REDIRECT) {
        LL_DBG_PRINTK ("[TRAP] FAIL--\n");
        return DP_DROP;
    }
    return DP_REDIRECT;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_redir_packet (void *ctx, struct xfi *xf)" startline="229" endline="244">
static int __always_inline dp_redir_packet (void *ctx, struct xfi *xf)
{
    LL_DBG_PRINTK ("[REDI] --\n");
    if (dp_redirect_port (&tx_intf_map, xf) != DP_REDIRECT) {
        LL_DBG_PRINTK ("[REDI] FAIL--\n");
        return DP_DROP;
    }

#ifdef LLB_DP_IF_STATS
    dp_do_map_stats (ctx, xf, LL_DP_TX_INTF_STATS_MAP, xf->pm.oport);

#endif
    return DP_REDIRECT;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_rewire_packet (void *ctx, struct xfi *xf)" startline="246" endline="257">
static int __always_inline dp_rewire_packet (void *ctx, struct xfi *xf)
{
    LL_DBG_PRINTK ("[REWR] --\n");
    if (dp_rewire_port (&tx_intf_map, xf) != DP_REDIRECT) {
        LL_DBG_PRINTK ("[REWR] FAIL--\n");
        return DP_DROP;
    }
    return DP_REDIRECT;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_pipe_check_res (void *ctx, struct xfi *xf, void *fa)" startline="262" endline="311">
static int __always_inline dp_pipe_check_res (void *ctx, struct xfi *xf, void *fa)
{
    LL_DBG_PRINTK ("[PIPE] act 0x%x\n", xf->pm.pipe_act);

#ifdef HAVE_DP_EGR_HOOK
    DP_LLB_MRK_INGP (ctx);

#endif
    if (xf->pm.pipe_act) {
        if (xf->pm.pipe_act & LLB_PIPE_DROP) {
            return DP_DROP;
        }
        if (dp_unparse_packet_always (ctx, xf) != 0) {
            return DP_DROP;
        }

#ifndef HAVE_LLB_DISAGGR

#ifdef HAVE_OOB_CH
        if (xf->pm.pipe_act & LLB_PIPE_TRAP) {
            return dp_trap_packet (ctx, xf, fa);
        }
        if (xf->pm.pipe_act & LLB_PIPE_PASS) {
            return DP_PASS;
        }

#else
        if (xf->pm.pipe_act & (LLB_PIPE_TRAP | LLB_PIPE_PASS)) {
            return DP_PASS;
        }

#endif

#else
        if (xf->pm.pipe_act & (LLB_PIPE_TRAP | LLB_PIPE_PASS)) {
            return dp_trap_packet (ctx, xf, fa);
        }

#endif
        if (xf->pm.pipe_act & LLB_PIPE_RDR_MASK) {
            if (dp_unparse_packet (ctx, xf) != 0) {
                return DP_DROP;
            }
            return dp_redir_packet (ctx, xf);
        }
    }
    return DP_PASS;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_ing (void *ctx, struct xfi *xf)" startline="313" endline="331">
static int __always_inline dp_ing (void *ctx, struct xfi *xf)
{
    dp_do_if_lkup (ctx, xf);

#ifdef LLB_DP_IF_STATS
    dp_do_map_stats (ctx, xf, LL_DP_INTF_STATS_MAP, xf->pm.iport);

#endif
    dp_do_map_stats (ctx, xf, LL_DP_BD_STATS_MAP, xf->pm.bd);
    if (xf->pm.mirr != 0) {
        dp_do_mark_mirr (ctx, xf);
    }
    if (xf->qm.ipolid != 0) {
        do_dp_policer (ctx, xf, 0);
    }
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_insert_fcv4 (void *ctx, struct xfi *xf, struct dp_fc_tacts *acts)" startline="333" endline="359">
static int __always_inline dp_insert_fcv4 (void *ctx, struct xfi *xf, struct dp_fc_tacts *acts)
{
    struct dp_fcv4_key *key;
    int z = 0;
    int *oif;
    int pkey = xf->pm.oport;
    oif = bpf_map_lookup_elem (& tx_intf_map, & pkey);
    if (oif) {
        acts->ca.oaux = *oif;
    }
    LL_DBG_PRINTK ("[FCH4] INS--\n");
    key = bpf_map_lookup_elem (& xfck, & z);
    if (key == NULL) {
        return -1;
    }
    if (bpf_map_lookup_elem (&fc_v4_map, key) != NULL) {
        return 1;
    }
    bpf_map_update_elem (&fc_v4_map, key, acts, BPF_ANY);
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_ing_slow_main (void *ctx, struct xfi *xf)" startline="361" endline="420">
static int __always_inline dp_ing_slow_main (void *ctx, struct xfi *xf)
{
    struct dp_fc_tacts *fa = NULL;

#ifdef HAVE_DP_FC
    int z = 0;
    fa = bpf_map_lookup_elem (& fcas, & z);
    if (!fa)
        return 0;
    fa->ca.ftrap = 0;
    fa->ca.cidx = 0;
    fa->zone = 0;
    fa->its = bpf_ktime_get_ns ();

#pragma clang loop unroll(full)
    for (z = 0; z < LLB_FCV4_MAP_ACTS; z++) {
        fa->fcta[z].ca.act_type = 0;
    }

#endif
    LL_DBG_PRINTK ("[INGR] START--\n");
    if (xf->pm.mirr != 0) {
        dp_do_mirr_lkup (ctx, xf);
        goto out;
    }
    dp_ing (ctx, xf);
    if (xf->pm.pipe_act || xf->pm.tc == 0) {
        goto out;
    }
    dp_ing_l2 (ctx, xf, fa);

#ifdef HAVE_DP_FC
    if (LL_PIPE_FC_CAP (xf)) {
        fa->zone = xf->pm.zone;
        dp_insert_fcv4 (ctx, xf, fa);
    }

#endif
out :
    xf->pm.phit |= LLB_DP_RES_HIT;
    bpf_tail_call (ctx, &pgm_tbl, LLB_DP_CT_PGM_ID);
    return DP_PASS;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_ing_ct_main (void *ctx, struct xfi *xf)" startline="422" endline="475">
static int __always_inline dp_ing_ct_main (void *ctx, struct xfi *xf)
{
    int val = 0;
    struct dp_fc_tacts *fa = NULL;

#ifdef HAVE_DP_FC
    fa = bpf_map_lookup_elem (& fcas, & val);
    if (!fa)
        return DP_DROP;

#endif
    if (xf->pm.phit & LLB_DP_RES_HIT) {
        goto res_end;
    }
    if ((xf->pm.phit & LLB_DP_ACL_HIT) == 0) {
        if (xf->pm.fw_lid < LLB_FW4_MAP_ENTRIES) {
            bpf_tail_call (ctx, &pgm_tbl, LLB_DP_FW_PGM_ID);
        }
        if (xf->pm.dp_rec) {
            dp_record_it (ctx, xf);
        }
        dp_do_nat (ctx, xf);
    }
    LL_DBG_PRINTK ("[CTRK] start\n");
    val = dp_ct_in (ctx, xf);
    if (val < 0) {
        return DP_PASS;
    }
    xf->nm.ct_sts = LLB_PIPE_CT_INP;
    dp_l3_fwd (ctx, xf, fa);
    dp_eg_l2 (ctx, xf, fa);
res_end :
    return dp_pipe_check_res (ctx, xf, fa);
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_devif.c" funcheader="static int __always_inline dp_ing_pass_main (void *ctx)" startline="477" endline="483">
static int __always_inline dp_ing_pass_main (void *ctx)
{
    LL_DBG_PRINTK ("[INGR] PASS--\n");
    return DP_PASS;
}
</source>
</doc>
