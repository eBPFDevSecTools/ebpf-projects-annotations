<?xml version="1.0"?>
<doc>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_do_rt4_fwdops (void *ctx, struct xfi *xf)" startline="7" endline="19">
static int __always_inline dp_do_rt4_fwdops (void *ctx, struct xfi *xf)
{
    struct iphdr *iph = DP_TC_PTR (DP_PDATA (ctx) +xf->pm.l3_off);
    void *dend = DP_TC_PTR (DP_PDATA_END (ctx));
    if (iph + 1 > dend) {
        LLBS_PPLN_DROP (xf);
        return -1;
    }
    ip_decrease_ttl (iph);
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_do_rt6_fwdops (void *ctx, struct xfi *xf)" startline="21" endline="33">
static int __always_inline dp_do_rt6_fwdops (void *ctx, struct xfi *xf)
{
    struct ipv6hdr *ip6h = DP_TC_PTR (DP_PDATA (ctx) +xf->pm.l3_off);
    void *dend = DP_TC_PTR (DP_PDATA_END (ctx));
    if (ip6h + 1 > dend) {
        LLBS_PPLN_DROP (xf);
        return -1;
    }
    ip6h->hop_limit--;
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_do_rt_fwdops (void *ctx, struct xfi *xf)" startline="35" endline="44">
static int __always_inline dp_do_rt_fwdops (void *ctx, struct xfi *xf)
{
    if (xf->l2m.dl_type == ETH_P_IP) {
        return dp_do_rt4_fwdops (ctx, xf);
    }
    else if (xf->l2m.dl_type == ETH_P_IPV6) {
        return dp_do_rt6_fwdops (ctx, xf);
    }
    return DP_DROP;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_pipe_set_l32_tun_nh (void *ctx, struct xfi *xf, struct dp_rt_nh_act *rnh)" startline="46" endline="67">
static int __always_inline dp_pipe_set_l32_tun_nh (void *ctx, struct xfi *xf, struct dp_rt_nh_act *rnh)
{
    struct dp_rt_l2nh_act *nl2;
    xf->pm.nh_num = rnh->nh_num;
    xf->tm.new_tunnel_id = rnh->tid;
    nl2 = &rnh->l2nh;
    memcpy (xf->l2m.dl_dst, nl2->dmac, 6);
    memcpy (xf->l2m.dl_src, nl2->smac, 6);
    memcpy (xf->pm.lkup_dmac, nl2->dmac, 6);
    xf->pm.bd = nl2->bd;
    LL_DBG_PRINTK ("[RTFW] new-vx nh %u\n", xf->pm.nh_num);
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static __u32 __always_inline dp_rtv4_get_ipkey (struct xfi *xf)" startline="69" endline="97">
static __u32 __always_inline dp_rtv4_get_ipkey (struct xfi *xf)
{
    __u32 ipkey;
    if (xf->pm.nf & LLB_NAT_DST) {
        ipkey = xf->nm.nxip4 ? : xf->l34m.saddr4;
    }
    else {
        if (xf->pm.nf & LLB_NAT_SRC) {
            if (xf->nm.nrip4) {
                ipkey = xf->nm.nrip4;
            }
            else if (xf->nm.nxip4 == 0) {
                ipkey = xf->l34m.saddr4;
            }
            else {
                ipkey = xf->l34m.daddr4;
            }
        }
        else {
            if (xf->tm.new_tunnel_id && xf->tm.tun_type == LLB_TUN_GTP) {
                ipkey = xf->tm.tun_rip;
            }
            else {
                ipkey = xf->l34m.daddr4;
            }
        }
    }
    return ipkey;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_do_rtops (void *ctx, struct xfi *xf, void *fa_, struct dp_rt_tact *act)" startline="99" endline="129">
static int __always_inline dp_do_rtops (void *ctx, struct xfi *xf, void *fa_, struct dp_rt_tact *act)
{
    LL_DBG_PRINTK ("[RTFW] action %d pipe %x\n", act->ca.act_type, xf->pm.pipe_act);
    if (act->ca.act_type == DP_SET_DROP) {
        LLBS_PPLN_DROP (xf);
    }
    else if (act->ca.act_type == DP_SET_TOCP) {
        LLBS_PPLN_TRAP (xf);
    }
    else if (act->ca.act_type == DP_SET_RDR_PORT) {
        struct dp_rdr_act *ra = &act->port_act;
        LLBS_PPLN_RDR (xf);
        xf->pm.oport = ra->oport;
    }
    else if (act->ca.act_type == DP_SET_RT_NHNUM) {
        struct dp_rt_nh_act *rnh = &act->rt_nh;
        xf->pm.nh_num = rnh->nh_num;
        return dp_do_rt_fwdops (ctx, xf);
    }
    else {
        LLBS_PPLN_DROP (xf);
    }
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_do_rtv6 (void *ctx, struct xfi *xf, void *fa_)" startline="131" endline="179">
static int __always_inline dp_do_rtv6 (void *ctx, struct xfi *xf, void *fa_)
{
    struct dp_rtv6_key *key = (void *) xf->km.skey;
    struct dp_rt_tact *act;
    key->l.prefixlen = 128;
    if (xf->pm.nf & LLB_NAT_DST) {
        if (DP_XADDR_ISZR (xf->nm.nxip)) {
            DP_XADDR_CP (key->addr, xf->l34m.saddr);
        }
        else {
            DP_XADDR_CP (key->addr, xf->nm.nxip);
        }
    }
    else {
        if (xf->pm.nf & LLB_NAT_SRC) {
            if (!DP_XADDR_ISZR(xf->nm.nrip)) {
                DP_XADDR_CP (key->addr, xf->nm.nrip);
            }
            else if (DP_XADDR_ISZR (xf->nm.nxip)) {
                DP_XADDR_CP (key->addr, xf->l34m.saddr);
            }
            else {
                DP_XADDR_CP (key->addr, xf->l34m.daddr);
            }
        }
        else {
            DP_XADDR_CP (key->addr, xf->l34m.daddr);
        }
    }
    LL_DBG_PRINTK ("[RT6FW] --Lookup");
    LL_DBG_PRINTK ("[RT6FW] --addr0 %x", key->addr[0]);
    LL_DBG_PRINTK ("[RT6FW] --addr1 %x", key->addr[1]);
    LL_DBG_PRINTK ("[RT6FW] --addr2 %x", key->addr[2]);
    LL_DBG_PRINTK ("[RT6FW] --addr3 %x", key->addr[3]);
    xf->pm.table_id = LL_DP_RTV6_MAP;
    act = bpf_map_lookup_elem (& rt_v6_map, key);
    if (!act) {
        xf->pm.nf &= ~LLB_NAT_SRC;
        LL_DBG_PRINTK ("RT Not found");
        return 0;
    }
    xf->pm.phit |= LLB_XDP_RT_HIT;
    dp_do_map_stats (ctx, xf, LL_DP_RTV6_STATS_MAP, act->ca.cidx);
    return dp_do_rtops (ctx, xf, fa_, act);
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_do_rtv4 (void *ctx, struct xfi *xf, void *fa_)" startline="181" endline="211">
static int __always_inline dp_do_rtv4 (void *ctx, struct xfi *xf, void *fa_)
{
    struct dp_rtv4_key *key = (void *) xf->km.skey;
    struct dp_rt_tact *act;
    key->l.prefixlen = 48;
    key->v4k[0] = xf->pm.zone >> 8 & 0xff;
    key->v4k[1] = xf->pm.zone & 0xff;
    *(__u32*) &key->v4k[2] = dp_rtv4_get_ipkey (xf);
    LL_DBG_PRINTK ("[RTFW] --Lookup\n");
    LL_DBG_PRINTK ("[RTFW] Zone %d 0x%x\n", xf->pm.zone, *(__u32*) &key->v4k[2]);
    xf->pm.table_id = LL_DP_RTV4_MAP;
    act = bpf_map_lookup_elem (& rt_v4_map, key);
    if (!act) {
        xf->pm.nf &= ~LLB_NAT_SRC;
        return 0;
    }
    xf->pm.phit |= LLB_XDP_RT_HIT;
    dp_do_map_stats (ctx, xf, LL_DP_RTV4_STATS_MAP, act->ca.cidx);
    return dp_do_rtops (ctx, xf, fa_, act);
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_pipe_set_nat (void *ctx, struct xfi *xf, struct dp_nat_act *na, int do_snat)" startline="213" endline="226">
static int __always_inline dp_pipe_set_nat (void *ctx, struct xfi *xf, struct dp_nat_act *na, int do_snat)
{
    xf->pm.nf = do_snat ? LLB_NAT_SRC : LLB_NAT_DST;
    DP_XADDR_CP (xf->nm.nxip, na->xip);
    DP_XADDR_CP (xf->nm.nrip, na->rip);
    xf->nm.nxport = na->xport;
    xf->nm.nv6 = na->nv6 ? 1 : 0;
    xf->nm.dsr = na->dsr;
    LL_DBG_PRINTK ("[ACL4] NAT ACT %x\n", xf->pm.nf);
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_do_ctops (void *ctx, struct xfi *xf, void *fa_, struct dp_ct_tact *act)" startline="228" endline="336">
static int __always_inline dp_do_ctops (void *ctx, struct xfi *xf, void *fa_, struct dp_ct_tact *act)
{

#ifdef HAVE_DP_FC
    struct dp_fc_tacts *fa = fa_;

#endif
    if (!act) {
        LL_DBG_PRINTK ("[ACL] miss");
        goto ct_trk;
    }
    xf->pm.phit |= LLB_DP_ACL_HIT;
    act->lts = bpf_ktime_get_ns ();

#ifdef HAVE_DP_FC
    fa->ca.cidx = act->ca.cidx;
    fa->ca.fwrid = act->ca.fwrid;

#endif
    if (act->ca.act_type == DP_SET_DO_CT) {
        goto ct_trk;
    }
    else if (act->ca.act_type == DP_SET_NOP) {
        struct dp_rdr_act *ar = &act->port_act;
        if (xf->pm.l4fin) {
            ar->fr = 1;
        }
        if (ar->fr == 1) {
            goto ct_trk;
        }
    }
    else if (act->ca.act_type == DP_SET_RDR_PORT) {
        struct dp_rdr_act *ar = &act->port_act;
        if (xf->pm.l4fin) {
            ar->fr = 1;
        }
        if (ar->fr == 1) {
            goto ct_trk;
        }
        LLBS_PPLN_RDR_PRIO (xf);
        xf->pm.oport = ar->oport;
    }
    else if (act->ca.act_type == DP_SET_SNAT || act->ca.act_type == DP_SET_DNAT) {
        struct dp_nat_act *na;

#ifdef HAVE_DP_FC
        struct dp_fc_tact *ta = &fa->fcta[act->ca.act_type == DP_SET_SNAT ? DP_SET_SNAT : DP_SET_DNAT];
        ta->ca.act_type = act->ca.act_type;
        memcpy (&ta->nat_act, &act->nat_act, sizeof (act->nat_act));

#endif
        na = &act->nat_act;
        if (xf->pm.l4fin) {
            na->fr = 1;
        }
        dp_pipe_set_nat (ctx, xf, na, act->ca.act_type == DP_SET_SNAT ? 1 : 0);
        dp_do_map_stats (ctx, xf, LL_DP_NAT_STATS_MAP, na->rid);
        if (na->fr == 1 || na->doct) {
            goto ct_trk;
        }
    }
    else if (act->ca.act_type == DP_SET_TOCP) {
        LLBS_PPLN_TRAPC (xf, LLB_PIPE_RC_ACL_MISS);
    }
    else if (act->ca.act_type == DP_SET_SESS_FWD_ACT) {
        struct dp_sess_act *pa = &act->pdr_sess_act;
        xf->pm.sess_id = pa->sess_id;
    }
    else {
        LLBS_PPLN_DROP (xf);
    }

#ifdef HAVE_DP_EXTCT
    if (xf->l34m.nw_proto == IPPROTO_TCP) {
        dp_run_ctact_helper (xf, act);
    }

#endif
    if (act->ca.fwrid != 0) {
        if (act->ca.record) {
            dp_record_it (ctx, xf);
            xf->pm.dp_rec = act->ca.record;
        }
        dp_do_map_stats (ctx, xf, LL_DP_FW4_STATS_MAP, act->ca.fwrid);
    }
    dp_do_map_stats (ctx, xf, LL_DP_CT_STATS_MAP, act->ca.cidx);

#if 0
    lock_xadd (&act->ctd.pb.bytes, xf->pm.l3_len);
    lock_xadd (&act->ctd.pb.packets, 1);

#endif
    return 0;
ct_trk :
    return dp_tail_call (ctx, xf, fa_, LLB_DP_CT_PGM_ID);
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_do_ing_ct (void *ctx, struct xfi *xf, void *fa_)" startline="338" endline="360">
static int __always_inline dp_do_ing_ct (void *ctx, struct xfi *xf, void *fa_)
{
    struct dp_ct_key key;
    struct dp_ct_tact *act;
    CT_KEY_GEN (&key, xf);
    LL_DBG_PRINTK ("[ACL] -- Lookup\n");
    LL_DBG_PRINTK ("[ACL] daddr %x\n", key.daddr[0]);
    LL_DBG_PRINTK ("[ACL] saddr %d\n", key.saddr[0]);
    LL_DBG_PRINTK ("[ACL] sport %d\n", key.sport);
    LL_DBG_PRINTK ("[ACL] dport %d\n", key.dport);
    LL_DBG_PRINTK ("[ACL] l4proto %d\n", key.l4proto);
    xf->pm.table_id = LL_DP_CT_MAP;
    act = bpf_map_lookup_elem (& ct_map, & key);
    if (!act) {
        LL_DBG_PRINTK ("[ACL] miss");
    }
    return dp_do_ctops (ctx, xf, fa_, act);
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static void __always_inline dp_do_ipv4_fwd (void *ctx, struct xfi *xf, void *fa_)" startline="362" endline="379">
static void __always_inline dp_do_ipv4_fwd (void *ctx, struct xfi *xf, void *fa_)
{
    if (xf->tm.tunnel_id == 0 || xf->tm.tun_type != LLB_TUN_GTP) {
        dp_do_sess4_lkup (ctx, xf);
    }
    if (xf->pm.phit & LLB_DP_TMAC_HIT) {
        if ((xf->pm.pipe_act & LLB_PIPE_RDR_MASK) == 0) {
            dp_do_rtv4 (ctx, xf, fa_);
        }
    }
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static void __always_inline dp_do_ipv6_fwd (void *ctx, struct xfi *xf, void *fa_)" startline="381" endline="393">
static void __always_inline dp_do_ipv6_fwd (void *ctx, struct xfi *xf, void *fa_)
{
    if (xf->pm.phit & LLB_DP_TMAC_HIT) {
        if ((xf->pm.pipe_act & LLB_PIPE_RDR_MASK) == 0) {
            dp_do_rtv6 (ctx, xf, fa_);
        }
    }
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_l3_fwd (void *ctx, struct xfi *xf, void *fa)" startline="395" endline="414">
static int __always_inline dp_l3_fwd (void *ctx, struct xfi *xf, void *fa)
{
    if (xf->l2m.dl_type == bpf_htons (ETH_P_IP)) {
        if (xf->pm.nf && xf->nm.nv6 != 0) {
            xf->nm.xlate_proto = 1;
            dp_do_ipv6_fwd (ctx, xf, fa);
        }
        else {
            dp_do_ipv4_fwd (ctx, xf, fa);
        }
    }
    else if (xf->l2m.dl_type == bpf_htons (ETH_P_IPV6)) {
        if (xf->pm.nf && xf->nm.nv6 == 0) {
            xf->nm.xlate_proto = 1;
            dp_do_ipv4_fwd (ctx, xf, fa);
        }
        else {
            dp_do_ipv6_fwd (ctx, xf, fa);
        }
    }
    return 0;
}
</source>
<source file="/home/sayandes/ebpf-projects-annotations/projects/loxilb-ebpf/original_source/kernel/llb_kern_l3fwd.c" funcheader="static int __always_inline dp_ing_l3 (void *ctx, struct xfi *xf, void *fa)" startline="416" endline="431">
static int __always_inline dp_ing_l3 (void *ctx, struct xfi *xf, void *fa)
{
    if (xf->l2m.dl_type == bpf_htons (ETH_P_IP)) {
        if (xf->tm.tunnel_id && (xf->tm.tun_type == LLB_TUN_GTP || xf->tm.tun_type == LLB_TUN_IPIP)) {
            dp_do_sess4_lkup (ctx, xf);
        }
    }
    dp_do_ing_ct (ctx, xf, fa);
    dp_l3_fwd (ctx, xf, fa);
    return 0;
}
</source>
</doc>
